import streamlit as st
import pandas as pd

st.title(":material/info: The Process of Developing the Brain Tumor Detection with VGG19")
st.header("1. Data Preparation")
st.markdown("""
    การเตรียมข้อมูลเริ่มจากการแยกประเภทข้อมูลที่เป็นภาพ MRI ซึ่งแบ่งเป็นสองประเภท คือ "Tumorous" (มะเร็งสมอง) และ "Non-Tumorous" (ไม่มีมะเร็งสมอง) โดยมีขั้นตอนดังนี้:
    
    1. **การเปลี่ยนชื่อไฟล์**: เริ่มต้นจากการเปลี่ยนชื่อไฟล์ภาพทั้งหมดในโฟลเดอร์ "yes" (มะเร็งสมอง) และ "no" (ไม่มีมะเร็งสมอง) ให้เป็นรูปแบบที่สอดคล้องกันเพื่อสะดวกในการจัดการ
    2. **การแสดงจำนวนข้อมูล**: เราทำการคำนวณจำนวนไฟล์ในแต่ละประเภทแล้วแสดงกราฟแท่งเพื่อดูสัดส่วนของภาพที่มีมะเร็งสมองและไม่มีมะเร็งสมอง ภาพที่มีมะเร็งสมองมีทั้งหมด 1500 ภาพ และภาพที่ไม่มีเร็งสมองมีทั้งหมด 1500 ภาพ
    3. **การขยายข้อมูล (Data Augmentation)**: ใช้ ImageDataGenerator เพื่อเพิ่มข้อมูลการฝึกอบรมโดยการหมุนภาพ, การย้ายภาพ, การพลิกภาพ เป็นต้น โดยเราได้ทำการขยายภาพมีมะเร็งสมองเป็น 3000 ภาพ และภาพที่ไม่มีมะเร็งสมอง 4499 ภาพ
""")

# Step 2: Brain Tumor Cropping
st.header("2. Brain Tumor Cropping")
st.markdown("""
    ในขั้นตอนนี้เราใช้เทคนิคการตัดภาพเพื่อให้ได้เฉพาะพื้นที่ของสมองที่สำคัญจากภาพ MRI โดยใช้วิธีการ thresholding และ contour detection ในการหาพื้นที่ที่เกี่ยวข้องและทำการครอบตัดภาพ
""")

# Step 3: Data Loading
st.header("3. Data Loading")
st.markdown("""
    หลังจากที่ได้ข้อมูลที่ผ่านการขยายและครอบตัดภาพแล้ว เราทำการโหลดข้อมูลเหล่านี้เข้าในรูปแบบที่โมเดลสามารถใช้งานได้ ซึ่งเราจะโหลดภาพทั้งสองประเภท (Tumorous และ Non-Tumorous) และทำการปรับขนาดของภาพให้มีขนาดที่เหมาะสมกับโมเดล VGG19
""")

# Step 4: Data Splitting
st.header("4. Data Splitting")
st.markdown("""
    ข้อมูลถูกแบ่งออกเป็นชุดฝึกอบรม (Train) 80%, การทดสอบ (Test) 10% และการตรวจสอบ (Validation) 10% โดยใช้ ImageDataGenerator เพื่อให้การฝึกอบรมเป็นไปอย่างมีประสิทธิภาพ
""")

# Step 5: Model Selection
st.header("5. Model Selection")
st.markdown("""
    เราเลือกใช้โมเดล VGG19 ที่มีประสิทธิภาพสูงในการจำแนกภาพ โดยโมเดลนี้จะไม่รวมชั้นสุดท้ายของโมเดล (top layer) และเราจะทำการฝึกอบรมโมเดลของเราด้วยการเพิ่มชั้น Dense และ Dropout เพื่อเพิ่มประสิทธิภาพในการจำแนก
""")

# Step 6: Model Training
st.header("6. Model Training")
st.markdown("""
    การฝึกอบรมโมเดลจะใช้การฝึกแบบ Fine-Tuning ซึ่งแบ่งเป็นสองขั้นตอน:
    
    1. **ช่วงแรก**: เราจะไม่ฝึกฝนชั้นของ VGG19 (เฉพาะชั้นที่เราสร้างขึ้นเองจะถูกฝึกฝน)
    2. **ช่วงที่สอง**: เราจะทำการฝึกทุกชั้นของโมเดลให้เรียนรู้ข้อมูลเพิ่มเติมจากภาพที่มี
""")

# Step 7: Model Evaluation
st.header("7. Model Evaluation")
st.markdown("""
    หลังจากฝึกอบรมโมเดลเสร็จสิ้น เราทำการประเมินผลบนข้อมูลทดสอบและข้อมูลการตรวจสอบ (Validation) เพื่อดูประสิทธิภาพของโมเดล โมเดลนี้มีความแม่นยำ (Accuracy) อยู่ที่ 69.87%
""")

st.header("8. Model Deployment using Streamlit")
st.write("""
    การใช้งานโมเดลทำนายเงินเดือนของนักพัฒนาซอฟต์แวร์ถูกพัฒนาในรูปแบบของเว็บแอปพลิเคชันที่ใช้ Streamlit ซึ่งช่วยให้สามารถสร้างอินเทอร์เฟซแบบกราฟิกสำหรับผู้ใช้เพื่อป้อนข้อมูลและรับการทำนายผลจากโมเดลที่พัฒนาได้

    - ผู้ใช้สามารถคลิกที่ปุ่ม "Choose an image..." เพื่อเลือกไฟล์ภาพที่คุณต้องการอัพโหลดจากคอมพิวเตอร์ของคุณ หลังจากเลือกไฟล์ภาพแล้ว แอปจะแสดงภาพที่คุณอัพโหลดให้เห็นทันทีในหน้าเว็บ เมื่อภาพถูกอัพโหลดแล้ว, คุณสามารถกดปุ่ม "Predict" ที่ด้านล่างของภาพเพื่อเริ่มการทำนาย
    """)

st.write("""
    ที่มา dataset: https://www.kaggle.com/datasets/navoneel/brain-mri-images-for-brain-tumor-detection
    """)

st.write("""
    ที่มา code: https://www.youtube.com/watch?v=-zmBMxpNDqQ&t=4259s
    """)